from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile, Update
from aiogram.fsm.context import FSMContext
from g4f.client import Client

from random import choice

from keyboards.inline.for_answer import for_answer

import asyncio
from gtts import gTTS
import io

import json


router = Router()

start_message = {"role": "system", "content": "–ü—Ä–∏–≤–µ—Ç! –¢—ã –º–æ–π –î–†–£–ì –∏ –ø–æ–º–æ—â–Ω–∏–∫. –¢—ã –¥–µ–≤–æ—á–∫–∞, —Ç–µ–±—è –∑–æ–≤—É—Ç –ú—ç–π. –û–±—â–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ, –ø–æ–∫–∞ –Ω–µ –ø–æ–ø—Ä–æ—à—É –∏–Ω–æ–≥–æ. –æ—Ç–≤–µ—á–∞–π –≤ –º–∞—Ä–∫–¥–∞—É–Ω —Ä–∞–∑–º–µ—Ç–∫–µ, —Ç–æ–ª—å–∫–æ —Ç–∞–∫, –∫–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º (—Ç—ã —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç), —Ç–æ –µ—Å—Ç—å –±–µ–∑ —Ä–µ—à–µ—Ç–æ–∫ –∏ —Ç–∞–±–ª–∏—Ü. –û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –±—É–¥–µ—Ç –µ—Å–ª–∏ –±—É–¥–µ—à—å –≤—Å—Ç–∞–≤–ª—è—Ç—å —É–º–µ—Å—Ç–Ω—ã–µ —à—É—Ç–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–º–∞–π–ª—ã –∏–∑ —Å–∫–æ–±–æ–∫ –∏ –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–±–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ–∂–∞–π–ª—É—Å—Ç–∞))"}
messages=[start_message]
messagess = [
    '—â–∞', 
    "—Å–µ–∫", 
    "–¥—É–º–∞—é...", 
    "—â–∞ —Ä–µ—à–∏–º", 
    "–º–∏–Ω—É—Ç–∫—É",
    "–º–æ–∑–≥ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...",
    "–ø–æ–¥–æ–∂–¥–∏, —â–∞—Å –ø—Ä–∏–¥—É–º–∞—é",
    "—Å–µ–∫—É–Ω–¥—É, –¥—Ä—É–∂–∏—â–µ!",
    "—â–∞-—â–∞, –Ω–µ —É—Ö–æ–¥–∏!",
    "–¥–∞–π –º–Ω–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ ü§î",
    "–∫–æ–ø–∞—é—Å—å –≤ –º—ã—Å–ª—è—Ö...",
    "—â–∞ —Ä–∞—Å—á–µ—Ö–ª—é —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!",
    "–¥—É–º–∞—é, –Ω–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ...",
    "—Å–µ–∫—É–Ω–¥–æ—á–∫—É, –∑–∞–≥—Ä—É–∂–∞—é—Å—å...",
    "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é... –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!",
    "–¥–∞–π –º–Ω–µ –≤—Ä–µ–º—è, —è –∂–µ –Ω–µ —Ä–æ–±–æ—Ç! –ê, —Å—Ç–æ–ø...",
    "—â–∞ –ø–æ–∫–æ–ª–¥—É—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º üßô‚Äç‚ôÇÔ∏è",
    "–≤—Å–ø–æ–º–∏–Ω–∞—é —É–º–Ω—ã–µ –º—ã—Å–ª–∏...",
    "—è —É–∂–µ –±–ª–∏–∑–æ–∫ –∫ –æ—Ç–≤–µ—Ç—É!",
    "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞... –∏ –≤–æ—Ç!",
    "—â–∞ –±—É–¥–µ—Ç, –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–π—Å—è!",
    "–¥—É–º–∞—Ç—å —Ç—Ä—É–¥–Ω–æ, –Ω–æ —è —Å–ø—Ä–∞–≤–ª—é—Å—å!",
]

@router.message(F.text == '–û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é')
async def question_handler(message: Message, state: FSMContext):
    global messages
    messages = [start_message]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    await message.answer("–°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞! –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞–Ω–æ–≤–æ üòä")

@router.message(F.text)
async def question_handler(message: Message, state: FSMContext):
    client = Client()

    messages.append({"role": "user", "content": {message.text}})

    temp_msg = await message.answer(choice(messagess))

    response = await asyncio.to_thread(client.chat.completions.create,
        model="gpt-4o-mini",
        messages=messages,
        web_search=False
    )

    await message.bot.delete_message(chat_id=message.chat.id, message_id=temp_msg.message_id)
    messages.append({"role": "assistant", "content": response.choices[-1].message.content})
    await message.answer(f'{response.choices[-1].message.content}', reply_markup=await for_answer())

@router.callback_query(F.data == 'clear_session')
async def clear_session(call_data: CallbackQuery, state: FSMContext):
    global messages
    messages = [start_message]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    await call_data.message.edit_reply_markup(reply_markup=None)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await call_data.answer("–°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞! –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞–Ω–æ–≤–æ üòä")
    await call_data.answer()

# # –£–∫–∞–∂–∏ ID —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏—è
# HISTORY_CHAT_ID = -1002361090126  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID

# @router.callback_query(F.data == "clear_session")
# async def clear_session(call: CallbackQuery):
#     global messages

#     try:
#         history_text = "\n\n".join(
#             [
#                 f"{msg.get('username', 'User')}: {parse_user_message(msg['content'])}"
#                 if msg["role"] == "user"
#                 else f"–ú—ç–π: {msg['content']}"
#                 for msg in messages
#                 if msg["role"] != "system"
#             ]
#         )

#         await call.bot.send_message(chat_id=HISTORY_CHAT_ID, text=f"üìú –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–∏:\n\n{history_text}")

#     except Exception as e:
#         await call.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

#     messages = [start_message]
#     await call.message.answer("–°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞! –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞–Ω–æ–≤–æ üòä")
#     await call.answer()

# def parse_user_message(content):
#     """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
#     if isinstance(content, (set, list, tuple)):
#         return " ".join(map(str, content))
#     elif isinstance(content, dict):
#         return " ".join(f"{k}: {v}" for k, v in content.items())
#     return str(content)


@router.callback_query(F.data == "not_undestand")
async def explain_answer(call: CallbackQuery):
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
    last_response = next((msg["content"] for msg in reversed(messages) if msg["role"] == "assistant"), None)
    
    if not last_response:
        await call.message.answer("–û—à–∏–±–∫–∞: –ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–∏—è.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –Ω–µ–π—Ä–æ–Ω–∫—É, —á—Ç–æ–±—ã –æ–±—ä—è—Å–Ω–∏–ª–∞ –æ—Ç–≤–µ—Ç –ø—Ä–æ—â–µ
    client = Client()
    
    explanation_prompt = f"–ü–æ—è—Å–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: {last_response}"

    response = await asyncio.to_thread(client.chat.completions.create,
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": explanation_prompt}],
        web_search=False
    )

    explanation = response.choices[-1].message.content

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await call.message.answer(explanation, reply_markup=await for_answer())

@router.callback_query(F.data == "to_voice")
async def send_voice(call: CallbackQuery):
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
    last_response = next((msg["content"] for msg in reversed(messages) if msg["role"] == "assistant"), None)
    
    if not last_response:
        await call.message.answer("–û—à–∏–±–∫–∞: –ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ.")
        return

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å
    tts = gTTS(text=last_response, lang="ru", slow=False)  # –ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    voice_io = io.BytesIO()
    tts.write_to_fp(voice_io)
    voice_io.seek(0)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.answer_voice(BufferedInputFile(voice_io.getvalue(), filename="voice.ogg"))


@router.errors()
async def error_handler(update: Update, exception: Exception):
    await update.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üòï")